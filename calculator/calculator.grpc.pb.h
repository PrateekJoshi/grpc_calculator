// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto
#ifndef GRPC_calculator_2eproto__INCLUDED
#define GRPC_calculator_2eproto__INCLUDED

#include "calculator.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace calculator {

class Calculator final {
 public:
  static constexpr char const* service_full_name() {
    return "calculator.Calculator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Addition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> AsyncAddition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(AsyncAdditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> PrepareAsyncAddition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(PrepareAsyncAdditionRaw(context, request, cq));
    }
    virtual ::grpc::Status Subraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> AsyncSubraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(AsyncSubractionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> PrepareAsyncSubraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(PrepareAsyncSubractionRaw(context, request, cq));
    }
    virtual ::grpc::Status Multiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> AsyncMultiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    virtual ::grpc::Status Divide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> AsyncDivide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>>(PrepareAsyncDivideRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* AsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* PrepareAsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* AsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* PrepareAsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* AsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::OutputNumber>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Addition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> AsyncAddition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(AsyncAdditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> PrepareAsyncAddition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(PrepareAsyncAdditionRaw(context, request, cq));
    }
    ::grpc::Status Subraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> AsyncSubraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(AsyncSubractionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> PrepareAsyncSubraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(PrepareAsyncSubractionRaw(context, request, cq));
    }
    ::grpc::Status Multiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> AsyncMultiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    ::grpc::Status Divide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> AsyncDivide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>>(PrepareAsyncDivideRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* AsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* PrepareAsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* AsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* PrepareAsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* AsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Addition_;
    const ::grpc::internal::RpcMethod rpcmethod_Subraction_;
    const ::grpc::internal::RpcMethod rpcmethod_Multiply_;
    const ::grpc::internal::RpcMethod rpcmethod_Divide_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Addition(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response);
    virtual ::grpc::Status Subraction(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response);
    virtual ::grpc::Status Multiply(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response);
    virtual ::grpc::Status Divide(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Addition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Addition() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Addition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Addition(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddition(::grpc::ServerContext* context, ::calculator::InputNumber* request, ::grpc::ServerAsyncResponseWriter< ::calculator::OutputNumber>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subraction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subraction(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubraction(::grpc::ServerContext* context, ::calculator::InputNumber* request, ::grpc::ServerAsyncResponseWriter< ::calculator::OutputNumber>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Multiply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiply(::grpc::ServerContext* context, ::calculator::InputNumber* request, ::grpc::ServerAsyncResponseWriter< ::calculator::OutputNumber>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Divide() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDivide(::grpc::ServerContext* context, ::calculator::InputNumber* request, ::grpc::ServerAsyncResponseWriter< ::calculator::OutputNumber>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Addition<WithAsyncMethod_Subraction<WithAsyncMethod_Multiply<WithAsyncMethod_Divide<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Addition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Addition() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Addition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Addition(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subraction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subraction(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Multiply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Divide() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Addition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Addition() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::calculator::InputNumber, ::calculator::OutputNumber>(std::bind(&WithStreamedUnaryMethod_Addition<BaseClass>::StreamedAddition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Addition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Addition(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::InputNumber,::calculator::OutputNumber>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Subraction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::calculator::InputNumber, ::calculator::OutputNumber>(std::bind(&WithStreamedUnaryMethod_Subraction<BaseClass>::StreamedSubraction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Subraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subraction(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubraction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::InputNumber,::calculator::OutputNumber>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Multiply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::calculator::InputNumber, ::calculator::OutputNumber>(std::bind(&WithStreamedUnaryMethod_Multiply<BaseClass>::StreamedMultiply, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::InputNumber,::calculator::OutputNumber>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Divide() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::calculator::InputNumber, ::calculator::OutputNumber>(std::bind(&WithStreamedUnaryMethod_Divide<BaseClass>::StreamedDivide, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Divide(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDivide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::InputNumber,::calculator::OutputNumber>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Addition<WithStreamedUnaryMethod_Subraction<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Addition<WithStreamedUnaryMethod_Subraction<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedService;
};

}  // namespace calculator


#endif  // GRPC_calculator_2eproto__INCLUDED
