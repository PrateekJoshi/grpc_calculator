// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto

#include "calculator.pb.h"
#include "calculator.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace calculator {

static const char* Calculator_method_names[] = {
  "/calculator.Calculator/Addition",
  "/calculator.Calculator/Subraction",
  "/calculator.Calculator/Multiply",
  "/calculator.Calculator/Divide",
};

std::unique_ptr< Calculator::Stub> Calculator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Calculator::Stub> stub(new Calculator::Stub(channel));
  return stub;
}

Calculator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Addition_(Calculator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subraction_(Calculator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Multiply_(Calculator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Divide_(Calculator_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Calculator::Stub::Addition(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Addition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::AsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Addition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::PrepareAsyncAdditionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Addition_, context, request, false);
}

::grpc::Status Calculator::Stub::Subraction(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Subraction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::AsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Subraction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::PrepareAsyncSubractionRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Subraction_, context, request, false);
}

::grpc::Status Calculator::Stub::Multiply(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Multiply_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::AsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Multiply_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Multiply_, context, request, false);
}

::grpc::Status Calculator::Stub::Divide(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::calculator::OutputNumber* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Divide_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::AsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Divide_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::OutputNumber>* Calculator::Stub::PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::calculator::InputNumber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::calculator::OutputNumber>::Create(channel_.get(), cq, rpcmethod_Divide_, context, request, false);
}

Calculator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::InputNumber, ::calculator::OutputNumber>(
          std::mem_fn(&Calculator::Service::Addition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::InputNumber, ::calculator::OutputNumber>(
          std::mem_fn(&Calculator::Service::Subraction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::InputNumber, ::calculator::OutputNumber>(
          std::mem_fn(&Calculator::Service::Multiply), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::InputNumber, ::calculator::OutputNumber>(
          std::mem_fn(&Calculator::Service::Divide), this)));
}

Calculator::Service::~Service() {
}

::grpc::Status Calculator::Service::Addition(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Subraction(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Multiply(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Divide(::grpc::ServerContext* context, const ::calculator::InputNumber* request, ::calculator::OutputNumber* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calculator

